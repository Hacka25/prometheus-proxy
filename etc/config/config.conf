
proxy {
  http.port = 8080

  grpc {
    port = 50051
    metricsEnabled = false
    allMetricsReported = false
    zipkinReportingEnabled = true
  }

  metrics {
    enabled = true
    port = 8082
    path = "metrics"

    standardExportsEnabled = false
    memoryPoolsExportsEnabled = false
    garbageCollectorExportsEnabled = false
    threadExportsEnabled = false
    classLoadingExportsEnabled = false
    versionInfoExportsEnabled = false
  }

  zipkin {
    enabled = false
    hostname = "localhost"
    port = 9411
    path = "api/v1/spans"
    serviceName = "prometheus-proxy"
  }

  internal {
    scrapeRequestQueueSize = 128
    scrapeRequestTimeoutSecs = 5
    scrapeRequestCheckMillis = 500
    scrapeRequestQueueCheckMillis = 500
    maxAgentInactivitySecs = 15      // Seconds of inactivity before agent is evicted
    staleAgentCheckEnabled = true
    staleAgentCheckPauseSecs = 10    // Sleep interval for agent cleanup
  }
}

agent {

  name = ""

  grpc {
    hostname = "localhost"
    port = 50051
    reconectPauseSecs = 3
    metricsEnabled = false
    allMetricsReported = false
    zipkinReportingEnabled = true
  }

  metrics {
    enabled = true
    port = 8083
    path = "metrics"

    standardExportsEnabled = false
    memoryPoolsExportsEnabled = false
    garbageCollectorExportsEnabled = false
    threadExportsEnabled = false
    classLoadingExportsEnabled = false
    versionInfoExportsEnabled = false
  }


  zipkin {
    enabled = false
    hostname = "localhost"
    port = 9411
    path = "api/v1/spans"
    serviceName = "prometheus-agent"
  }

  pathConfigs: [
    {
      name: String
      path: String
      url: String
    }
  ]

  internal {
    scrapeResponseQueueSize = 128
    scrapeResponseQueueCheckMillis = 500
    heartbeatEnabled = true
    heartbeatCheckPauseMillis = 500  // Pause time when checking for inactivity
    heartbeatMaxInactivitySecs = 5   // Max inactivity before hearbeat sent
  }
}